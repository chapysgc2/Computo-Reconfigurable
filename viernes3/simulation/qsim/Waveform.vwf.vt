// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2021 16:58:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mul
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mul_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] a;
reg [7:0] b;
// wires                                               
wire [15:0] c;

// assign statements (if any)                          
mul i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
	a[6] = #640000 1'b1;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
	a[5] = #320000 1'b1;
	a[5] = #320000 1'b0;
	a[5] = #320000 1'b1;
end 
// a[ 4 ]
initial
begin
	repeat(3)
	begin
		a[4] = 1'b0;
		a[4] = #160000 1'b1;
		# 160000;
	end
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	repeat(6)
	begin
		a[3] = 1'b0;
		a[3] = #80000 1'b1;
		# 80000;
	end
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	repeat(12)
	begin
		a[2] = 1'b0;
		a[2] = #40000 1'b1;
		# 40000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #20000 1'b1;
	#20000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	#10000;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
	b[7] = #640000 1'b1;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
	b[6] = #320000 1'b1;
	b[6] = #320000 1'b0;
	b[6] = #320000 1'b1;
end 
// b[ 5 ]
initial
begin
	repeat(3)
	begin
		b[5] = 1'b0;
		b[5] = #160000 1'b1;
		# 160000;
	end
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	repeat(6)
	begin
		b[4] = 1'b0;
		b[4] = #80000 1'b1;
		# 80000;
	end
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	repeat(12)
	begin
		b[3] = 1'b0;
		b[3] = #40000 1'b1;
		# 40000;
	end
	b[3] = 1'b0;
end 
// b[ 2 ]
always
begin
	b[2] = 1'b0;
	b[2] = #20000 1'b1;
	#20000;
end 
// b[ 1 ]
always
begin
	b[1] = 1'b0;
	b[1] = #10000 1'b1;
	#10000;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 
endmodule

