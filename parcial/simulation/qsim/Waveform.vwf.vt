// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2021 14:25:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          parcial
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module parcial_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] DIN;
reg Resetn;
reg Run;
reg lock;
// wires                                               
wire [15:0] BusWires;
wire Done;

// assign statements (if any)                          
parcial i1 (
// port map - connection between master ports and signals/registers   
	.BusWires(BusWires),
	.DIN(DIN),
	.Done(Done),
	.Resetn(Resetn),
	.Run(Run),
	.lock(lock)
);
initial 
begin 
#1000000 $finish;
end 
// DIN[ 15 ]
initial
begin
	repeat(33)
	begin
		DIN[15] = 1'b0;
		DIN[15] = #15000 1'b1;
		# 15000;
	end
	DIN[15] = 1'b0;
end 
// DIN[ 14 ]
initial
begin
	repeat(33)
	begin
		DIN[14] = 1'b0;
		DIN[14] = #15000 1'b1;
		# 15000;
	end
	DIN[14] = 1'b0;
end 
// DIN[ 13 ]
initial
begin
	repeat(33)
	begin
		DIN[13] = 1'b0;
		DIN[13] = #15000 1'b1;
		# 15000;
	end
	DIN[13] = 1'b0;
end 
// DIN[ 12 ]
initial
begin
	repeat(33)
	begin
		DIN[12] = 1'b0;
		DIN[12] = #15000 1'b1;
		# 15000;
	end
	DIN[12] = 1'b0;
end 
// DIN[ 11 ]
initial
begin
	repeat(33)
	begin
		DIN[11] = 1'b0;
		DIN[11] = #15000 1'b1;
		# 15000;
	end
	DIN[11] = 1'b0;
end 
// DIN[ 10 ]
initial
begin
	repeat(33)
	begin
		DIN[10] = 1'b0;
		DIN[10] = #15000 1'b1;
		# 15000;
	end
	DIN[10] = 1'b0;
end 
// DIN[ 9 ]
initial
begin
	repeat(33)
	begin
		DIN[9] = 1'b0;
		DIN[9] = #15000 1'b1;
		# 15000;
	end
	DIN[9] = 1'b0;
end 
// DIN[ 8 ]
initial
begin
	repeat(33)
	begin
		DIN[8] = 1'b0;
		DIN[8] = #15000 1'b1;
		# 15000;
	end
	DIN[8] = 1'b0;
end 
// DIN[ 7 ]
initial
begin
	repeat(33)
	begin
		DIN[7] = 1'b0;
		DIN[7] = #15000 1'b1;
		# 15000;
	end
	DIN[7] = 1'b0;
end 
// DIN[ 6 ]
initial
begin
	repeat(33)
	begin
		DIN[6] = 1'b0;
		DIN[6] = #15000 1'b1;
		# 15000;
	end
	DIN[6] = 1'b0;
end 
// DIN[ 5 ]
initial
begin
	repeat(33)
	begin
		DIN[5] = 1'b0;
		DIN[5] = #15000 1'b1;
		# 15000;
	end
	DIN[5] = 1'b0;
end 
// DIN[ 4 ]
initial
begin
	repeat(33)
	begin
		DIN[4] = 1'b0;
		DIN[4] = #15000 1'b1;
		# 15000;
	end
	DIN[4] = 1'b0;
end 
// DIN[ 3 ]
initial
begin
	repeat(33)
	begin
		DIN[3] = 1'b0;
		DIN[3] = #15000 1'b1;
		# 15000;
	end
	DIN[3] = 1'b0;
end 
// DIN[ 2 ]
initial
begin
	repeat(33)
	begin
		DIN[2] = 1'b0;
		DIN[2] = #15000 1'b1;
		# 15000;
	end
	DIN[2] = 1'b0;
end 
// DIN[ 1 ]
initial
begin
	repeat(33)
	begin
		DIN[1] = 1'b0;
		DIN[1] = #15000 1'b1;
		# 15000;
	end
	DIN[1] = 1'b0;
end 
// DIN[ 0 ]
initial
begin
	repeat(33)
	begin
		DIN[0] = 1'b0;
		DIN[0] = #15000 1'b1;
		# 15000;
	end
	DIN[0] = 1'b0;
end 

// Resetn
initial
begin
	Resetn = 1'b0;
end 

// Run
initial
begin
	Run = 1'b0;
end 

// lock
initial
begin
	lock = 1'b0;
end 
endmodule

